pool:
  vmImage: 'VS2017-Win2016'
  
variables:
  buildConfiguration: Release
  IS_RELEASE: false
  
steps:
- task: DotNetCoreCLI@2
  displayName: 'Run Tests'
  inputs:
    command: custom
    custom: test
    projects: '**/*.Tests.csproj'
    arguments: /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --configuration $(buildConfiguration) --logger trx /p:Exclude=[xunit.*]*
    
- task: DotNetCoreCLI@2
  displayName: 'Package Application'
  inputs:
    command: custom
    custom: pack
    arguments: --version-suffix beta.$(Build.BuildId) --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
    enabled: $(IS_PRERELEASE)

- task: DotNetCoreCLI@2
  displayName: 'Package Application'
  inputs:
    command: custom
    custom: pack
    arguments: --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)

- task: DotNetCoreCLI@2
  displayName: 'Generate Coverage Report'
  inputs:
    command: custom
    custom: reportgenerator
    arguments: -reports:../*/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)\CoverageReports -reporttypes:HtmlInline
    workingDirectory: '$(Build.SourcesDirectory)\test\Klinked.Cqrs.Tests'

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testRunner: VSTest
    testResultsFiles: '**\*.trx'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)\test\**\coverage.cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)\CoverageReports'

- task: PublishBuildArtifacts@1
  
- task: NuGetCommand@2
  displayName: 'Push to NuGet'
  condition: and(succeeded(), eq(variables['IS_RELEASE'], 'true'))
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(Build.ArtifactStagingDirectory)\**\*.nupkg'
    publishFeedCredentials: 'NuGet Feed'
